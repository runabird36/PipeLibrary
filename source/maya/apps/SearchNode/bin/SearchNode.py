

import sys
from PySide2.QtWidgets import QWidget
import maya.cmds as cmds
import maya.api.OpenMaya as OpenMaya
import maya.OpenMayaUI as mui
from traceback import print_exc
from shiboken2 import wrapInstance
from os.path import dirname, realpath



def maya_useNewAPI():
    """
    The presence of this function tells Maya that the plugin produces, and
    expects to be passed, objects created using the Maya Python API 2.0.
    """
    pass

def _maya_main_window():
   '''
   Get the maya main window as a QMainWindow instance
   '''
   ptr = mui.MQtUtil.mainWindow()
   if ptr is not None:
        return wrapInstance(int(ptr),QWidget)
   


class selectNodeCMD(OpenMaya.MPxCommand):
    COMMAND_NAME = "SS_search"

    def __init__(self):
        super(selectNodeCMD, self).__init__()

    def doIt(self, args):
        try:
            _path = "/usersetup/linux/scripts/maya_sc/SearchNode"
            if _path not in sys.path:
                sys.path.append(_path)

            from lib.SN_view import SNview
            self._ui = SNview(_maya_main_window())
            self._ui.show()
        except:
            
            print_exc()
    
    
    


##########################################################
# Plug-in initialization.
##########################################################       
def cmdCreator():
    ''' Creates an instance of our command class. '''
    return selectNodeCMD() 

def initializePlugin(mobject):
    ''' Initializes the plug-in.'''
    mplugin = OpenMaya.MFnPlugin( mobject )
    try:
        mplugin.registerCommand( selectNodeCMD.COMMAND_NAME, cmdCreator )
        
        runtime_cmd = "SS_searchnodes"
        name_cmd    = "SS_search_ncmd"
        if not cmds.runTimeCommand(runtime_cmd, exists=True):
            runtime_cmd = cmds.runTimeCommand(runtime_cmd, default=True, annotation='search node', category='User', command="cmds.SS_search()")

        name_cmd = cmds.nameCommand(name_cmd, default=True, annotation=' nameCommand generated by ml_toolbox', command=runtime_cmd)
        cmds.hotkey(keyShortcut="P", ctl=True, name=name_cmd)
    except:
        print_exc()
        sys.stderr.write( "Failed to register command: %s\n" % selectNodeCMD.COMMAND_NAME )

def uninitializePlugin(mobject):
    ''' Uninitializes the plug-in '''
    mplugin = OpenMaya.MFnPlugin( mobject )
    try:
        mplugin.deregisterCommand( selectNodeCMD.COMMAND_NAME )
    except:
        sys.stderr.write( "Failed to unregister command: %s\n" % selectNodeCMD.COMMAND_NAME )


